name: Release and Deployment Workflow
'on':
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Enter release type (e.g., patch, minor, major)'
        required: true
      environment:
        description: 'Enter environment (e.g., dev, st1, st2, ... prod)'
        required: true
env:
  DEV_BRANCH: dev
  ST_BRANCH_PREFIX: st
  MOT_BRANCH: mot
  PROD_BRANCH: main
jobs:
  release-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set Git Identity
        run: |
          git config --global user.name "rhnarayanan"
          git config --global user.email "rhnarayanan@gmail.com"
      - name: Generate Release Tag
        id: generate_tag
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 || echo "0.0.0")
          if [ "${{ inputs.release_type }}" == "patch" ]; then
            VERSION=$(echo $LAST_TAG | awk -F. '{print $1 "." $2 "." $3+1}')
          elif [ "${{ inputs.release_type }}" == "minor" ]; then
            VERSION=$(echo $LAST_TAG | awk -F. '{print $1 "." $2+1 ".0"}')
          elif [ "${{ inputs.release_type }}" == "major" ]; then
            VERSION=$(echo $LAST_TAG | awk -F. '{print $1+1 ".0.0"}')
          else
            echo "Invalid release type: ${{ inputs.release_type }}"
            exit 1
          fi
          echo "Generated Release Tag: $VERSION"
          echo "RELEASE_TAG=$VERSION" >> $GITHUB_ENV
      - name: Push Release Tag
        run: |
          if git rev-parse $RELEASE_TAG >/dev/null 2>&1; then
            echo "Tag $RELEASE_TAG already exists. Skipping..."
          else
            git tag $RELEASE_TAG
            git push origin $RELEASE_TAG
          fi
      - name: Identify Commits
        id: commits
        run: >
          PREV_TAG=$(git describe --tags --abbrev=0 $RELEASE_TAG^ || echo "")

          if [ -z "$PREV_TAG" ]; then
            echo "No previous tag found. Using the first commit."
            PREV_TAG=$(git rev-list --max-parents=0 HEAD)
          fi

          echo "Previous Tag: $PREV_TAG"

          git log ${PREV_TAG}..${RELEASE_TAG} --oneline > commits.txt

          cat commits.txt

          echo "CHERRY_PICK_COMMITS=$(cat commits.txt | awk '{print $1}' | tr
          '\n' ' ')" >> $GITHUB_ENV
      - name: Determine Target Branch
        id: target_branch
        run: |
          case "${{ inputs.environment }}" in
            dev)
              echo "BRANCH=${{ env.DEV_BRANCH }}" >> $GITHUB_ENV
              ;;
            prod)
              echo "BRANCH=${{ env.PROD_BRANCH }}" >> $GITHUB_ENV
              ;;
            mot)
              echo "BRANCH=${{ env.MOT_BRANCH }}" >> $GITHUB_ENV
              ;;
            st*)
              ST_NUMBER=$(echo "${{ inputs.environment }}" | sed 's/st//')
              if [[ -z "$ST_NUMBER" ]]; then
                echo "Invalid staging environment: ${{ inputs.environment }}"
                exit 1
              fi
              echo "BRANCH=${{ env.ST_BRANCH_PREFIX }}$ST_NUMBER" >> $GITHUB_ENV
              ;;
            *)
              echo "Invalid environment: ${{ inputs.environment }}"
              exit 1
              ;;
          esac
          echo "Target Branch: $BRANCH"
      - name: Debug Branch Value
        run: |
          echo "Branch: $BRANCH"
          if [ -z "$BRANCH" ]; then
            echo "Error: BRANCH is empty!"
            exit 1
          fi
      - name: Checkout or Create Branch
        run: |
          BRANCH=${{ env.BRANCH }}
          if git show-ref --verify --quiet refs/heads/$BRANCH; then
            echo "Branch $BRANCH exists locally. Checking out..."
            git checkout $BRANCH
          elif git ls-remote --heads origin $BRANCH | grep $BRANCH; then
            echo "Branch $BRANCH exists remotely. Checking out..."
            git checkout -b $BRANCH --track origin/$BRANCH
          else
            echo "Branch $BRANCH does not exist. Creating it..."
            git checkout -b $BRANCH
            git push --set-upstream origin $BRANCH
          fi
      - name: Cherry-Pick Commits
        run: |
          for COMMIT in $CHERRY_PICK_COMMITS; do
            git cherry-pick $COMMIT || \
              (echo "Conflict detected! Resolving..." && git add . && git cherry-pick --continue || git cherry-pick --abort)
          done
          git push origin $BRANCH
      - name: Deploy to Target Environment
        run: |
          echo "Deploying to Environment: ${{ inputs.environment }}"
          sfdx force:source:deploy -p ./src -u ${{ inputs.environment }}
